# -*- coding: utf-8 -*-
"""A2A_XAI_stockAnalytics_Framework _code2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WC-RhIdYkkYTqmfF3XseKnZMF3RgnQtD
"""

from google.colab import drive
drive.mount('/content/drive')

BASE = "/content/drive/MyDrive/A2A_prediction_system"

!pip -q install fastapi "uvicorn[standard]" orjson requests \
                 langgraph yfinance numpy pandas scikit-learn ta matplotlib

import os, sys, pathlib, importlib, traceback

# package markers
pathlib.Path(f"{BASE}/backend/__init__.py").touch()
pathlib.Path(f"{BASE}/backend/a2a/__init__.py").touch()

# make project importable
if BASE not in sys.path:
    sys.path.insert(0, BASE)


os.environ["A2A_ROOT"] = BASE
os.environ["PYTHONPATH"] = f"{BASE}:{BASE}/backend"

# quick checks
print("Has app.py?    ", os.path.exists(f"{BASE}/backend/app.py"))
print("Has orchestrator?", os.path.exists(f"{BASE}/backend/a2a/orchestrator.py"))
print("Has index.html?", os.path.exists(f"{BASE}/frontend/index.html"))

# import test: should print OK
try:
    importlib.import_module("backend.app")
    print("backend.app import OK")
except Exception:
    print("Import failed:\n", traceback.format_exc())

# Commented out IPython magic to ensure Python compatibility.
import time, requests

# stop any old server
!pkill -f "uvicorn .* backend.app:app" >/dev/null 2>&1 || true

# start fresh
# %cd $BASE
!nohup python -m uvicorn backend.app:app --host 0.0.0.0 --port 8000 --loop asyncio --http h11 > /tmp/uvicorn.log 2>&1 &

# wait
ok = False
for _ in range(20):
    time.sleep(0.5)
    try:
        print("Health:", requests.get("http://127.0.0.1:8000/health", timeout=2).json())
        ok = True
        break
    except: pass

if not ok:
    print("Server not ready. Recent logs:")
    !tail -n 120 /tmp/uvicorn.log
else:
    print("UI status:", requests.get("http://127.0.0.1:8000/ui/index.html", timeout=5).status_code)

# start a quick tunnel (prints a trycloudflare URL)
!curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o /usr/local/bin/cloudflared
!chmod +x /usr/local/bin/cloudflared

import subprocess, re, time
proc = subprocess.Popen(
    ["cloudflared","tunnel","--url","http://localhost:8000","--no-autoupdate"],
    stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True
)
BASE_PUBLIC = None
deadline = time.time() + 60
while time.time() < deadline:
    line = proc.stdout.readline()
    if not line: time.sleep(0.1); continue
    m = re.search(r"https://[\w\.-]*trycloudflare\.com", line)
    if m: BASE_PUBLIC = m.group(0); break

print("Public URL:", BASE_PUBLIC)

# open a tab
from google.colab import output
if BASE_PUBLIC:
    output.eval_js(f'window.open("{BASE_PUBLIC}/ui/index.html", "_blank")')
    print("If the tab didnâ€™t open, click:", f"{BASE_PUBLIC}/ui/index.html")

# Colab cell
from backend.a2a.orchestrator import run_orchestrator

cfg = {
  "user_request": "Analyze AAPL last 5 years; forecast 3 days; include evaluation, IG and SHAP, risk, optimization, and HTML report.",
  "tickers": ["AAPL"],
  "report_out_name": "llm_report.html",
  "xai_args": {
      "skip_shap": False,

      "k_last": 60, "bg_cap": 48,
      "shap_backend_order": ["gradient","deep"],
      "kernel_nsamples": 80
  }
}

res = run_orchestrator(cfg)
print("Run base:", res["run_base"])
print("Report path:", res["report_path"])

from IPython.display import HTML
# quick preview by rewriting absolute paths if needed
html = open(res["report_path"], "r", encoding="utf-8").read()
HTML(html)